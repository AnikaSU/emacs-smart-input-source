#+TITLE: README
[[https://melpa.org/#/smart-input-source][file:https://melpa.org/packages/smart-input-source-badge.svg]]

* About
Switch input source smartly.

#+CAPTION: Smart input source
[[./screenshots/smart-input-source.gif]]

* Features
1. Use OS native input source, no need to change use experience.
2. Support GUI Emacs, as well as Terminial Emacs.
3. Easy to install and config. No further config for ~GUI Emacs Mac Port~ with
   ~Sogou Input~.
4. Respect ~Evil~ (also works without evil):
   1) When leave ~insert~ mode, switch to English input source automatically.
   2) when enter ~insert~ model, switch input source automatically according to
      context.
5. Support ~inline english~ region:
   1) Blank after CJK characters triggers the region.
   2) In this mode, Engligh will be sticked.
   3) Region is closed when cursor leaves the region or ~Return~ is pressed.
6. Input source switching rules are designed carefully.
   1) When edit english, input source will never be switched automatically.
   2) Switching considering the characters before and after the cursor, as well
      as crossing lines.
   3) Major rules to switch input source acorrding to context:
      - Input source should be consistent with context as much as possible.
      - Except cross lines, there should not be spaces between CJK characters.
      -  When english is mixed with CJK, spaces are used as seperators.
* Features (Chinese)
1. 使用操作系统的输入法，不改变使用习惯。
2. 支持 GUI Emacs, 也支持 Terminal Emacs.
3. 安装配置简单， GUI Emacs Mac Port 下使用搜狗拼音免配置。
4. 如果在 Evil 下（没有evil也可以正常工作）:
   1) 从 insert 模式离开时，自动切换到英文输入法。
   2) 进入 insert 模式时, 根据上下文自动切换输入法。
5. 支持 inline english 区域：
   1) 汉字后面跟空格触发 inline english 区域。
   2) 在 inline english 下，一直使用英文输入法。
   3) 光标离开区域，或者回车，关闭 inline english 区域。
6. 输入法自动切换规则经过仔细设计：
   1) 编辑英文时，永远不会自动切换到中文输入法
   2) 输入法的切换除了考虑到前后字符，还考虑了换行。
   3) 根据上下文切换输入法的主要规则：
      - 输入法尽量和上下文一致。
      - 除了换行，纯中文之间不应该有空格。
      - 中英文混排时，中英文之间用空格隔开。

* Install
Just install this package from ~melpa~.
- For GUI ~Emacs mac port~: all is done.
- For other MacOS emacs: you should also install [[https://github.com/laishulu/macism][macism]], which is already
  preconfigured.
- For other system: use other input source manager. Configure for ~fcitx~ is
  given as an example.
* Usage
Load the package, edit a file, and then run ~smart-input-source-mode~, if it finds no input source manager, it will do nothing.
* Configure

| Variable                                       | Description                                | Default                              |
|------------------------------------------------+--------------------------------------------+--------------------------------------|
| ~smart-input-source-english-pattern~      | Pattern to identify a character as english | ~[a-zA-Z]~                           |
| ~smart-input-source-other-pattern~        | Pattern to identify a character as other   | ~\\cc~ see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Regexp-Backslash.html][emacs manual]]              |
| ~smart-input-source-blank-pattern~        | Pattern to identify a character as blank   | ~[:blank:]~                          |
| ~smart-input-source-english-input-source~ | Input source for english                   | ~com.apple.keylayout.US~             |
| ~smart-input-source-other-input-source~   | Input source for other lanugage            | ~com.sogou.inputmethod.sogou.pinyin~ |
| ~smart-input-source-external-ism~         | input resource manager                     | ~macism~                             |
| ~smart-input-source-do-get-input-source~  | Function to get the current input source   | determined from the envrionment      |
| ~smart-input-source-do-set-input-source~  | Function to set the input source           | determined from the envrionment      |
|------------------------------------------------+--------------------------------------------+--------------------------------------|

* Inernals
** When to switch input source
- Enter insert mode: select input source smartly by inspect the context.
- Leave insert mode: select english input source
- Input a character: select input source smartly by inspect the context.
** How smart to select input source by context
Denote character of other language as ~A~, english character as ~a~, and ~^~ as cursor.

- Same line rules:
  - ~A ^~ and ~^ A~ will change to ENGLISH. In the former case, `inline english`
    mode will be enabled.
  - ~A^~ and ~^A~ will change to OTHER.
  - ~a^~ and ~^a~ will change to ENGLISH.
- Across line rules:
  - ~A\n^~ will change to OTHER.
  - ~a\n^~ will change to ENGLISH.
- ~inline english~ ending rules:
  - ~`inline english` ^\na~ will not change.
  - ~`inline english` ^a~ will not change.
  - ~`inline english` ^A~ will change to OTHER.
** How the input source is switched
- For GUI session of ~emacs mac port~, use native API for better performance.
- If ~emacs mac port~ is unavailable, or in terminal session, use ~macism~ or
  other compatible CLI tool.
- If even ~macism~ like tool is unailable, then do nothing.
* Use other input source manager
If you don't use ~macos~, your should install other compatible tool:
  - For tool fulfills the following requirements, you can just:
    ~(setq smart-input-source-external-ism TOOL_PATH)~
    - Run ~tool~ will output the current input source
    - Run ~tool SOME_INPUT_SOURCE_ID~ will select to ~SOME_INPUT_SOURCE_ID~.
  - For other tool, customize the following variables:
    - ~smart-input-source-do-get-input-source~
    - ~smart-input-source-do-set-input-source~

Case study: ~fcitx~, a input method popular among Chinese Linux users.
~fcitx-remote~ can server as an input source manager for `fcitx`, you can config
as following:
#+BEGIN_SRC lisp
(require 'subr-x)
(let fcitx-remote-path (executable-find "fcitx-remote")
     (when fcitx-remote-path
       (setq smart-input-source-english-input-source "1")
       (setq smart-input-source-other-input-source "2")
       (setq smart-input-source-do-get-input-source
             (lambda()(string-trim (shell-command-to-string fcitx-remote-path))))
       (setq smart-input-source-do-set-input-source
             (lambda(source)
               (pcase source
                 ("1" (string-trim (shell-command-to-string
                             (concat fcitx-remote-path " -c"))))
                 ("2" (string-trim (shell-command-to-string
                             (concat fcitx-remote-path " -o")))))))))
#+END_SRC
