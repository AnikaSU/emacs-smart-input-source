#+TITLE: README
[[https://melpa.org/#/smart-input-source][file:https://melpa.org/packages/smart-input-source-badge.svg]]

* About
This package provide a buffer local mode ~smart-input-source-mode~ to switch
OS native input source smartly.

#+CAPTION: Smart input source
[[./screenshots/smart-input-source.gif]]

* Features
1. Use OS native input source, no need to change use experience.
2. Support GUI Emacs, as well as Terminial Emacs.
3. Easy to install and config. No further config for ~GUI Emacs Mac Port~ with
   ~Sogou Input~.
4. Respect ~Evil~ (also works without evil):
   1) When leave ~insert~ mode, switch to English input source automatically.
   2) when enter ~insert~ model, switch input source automatically according to
      context.
5. Support ~inline english~ region:
   1) Blank after CJK characters triggers the region.
   2) In this mode, Engligh will be sticked.
   3) Region is closed when cursor leaves the region or ~Return~ is pressed.
6. Input source switching rules are designed carefully.
   1) When edit english, input source will never be switched automatically.
   2) Switching considering the characters before and after the cursor, as well
      as crossing lines.

* Features (Chinese)
1. 使用操作系统的输入法，不改变使用习惯。
2. 支持 GUI Emacs, 也支持 Terminal Emacs.
3. 安装配置简单， GUI Emacs Mac Port 下使用搜狗拼音免配置。
4. 如果在 Evil 下（没有 evil 也可以正常工作）:
   1) 从 insert 模式离开时，自动切换到英文输入法。
   2) 进入 insert 模式时, 根据上下文自动切换输入法。
5. 支持 inline english 区域：
   1) 汉字后面跟空格触发 inline english 区域。
   2) 在 inline english 下，一直使用英文输入法。
   3) 光标离开区域，或者回车，关闭 inline english 区域。
6. 可以安全地默认开启mode：
   1) 编辑英文时，永远不会自动切换输入法
   2) 输入法的切换除了考虑到前后字符，还考虑了换行。

* Install
Just install this package from ~melpa~, and then install *input source manager*
by any of the following ways:
- On MacOS, use GUI Emacs Mac Port (EMP), no need to configure input source
  manager. You can install ~EMP~ by the following commands:
  #+BEGIN_SRC bash
  brew tap railwaycat/emacsmacport
  brew install emacs-mac --with-modules --with-rsvg --with-imagemagick --with-natural-title-bar
  #+END_SRC
- On MacOS, use Emacs other than GUI EMP, with ~macism~, no need to configure
  input source manager. you can install ~macism~ by the following commands:
  #+BEGIN_SRC bash
  brew tap laishulu/macism
  brew install macism
  #+END_SRC
  Note: The first time when you use ~macism SOME_INPUT_SOURCE_ID~ in your app,
  MacOS will popup a window asking you to grant permission of Accessibility, you
  can also grant the permission manually following the instructions in [[https://github.com/laishulu/macism/][macism]].

  If you have problems on granting permission of Accessibility for Emacs, see
  below:
  #+BEGIN_QUOTE
  Some Emacs "distributions" package together a number of Emacs binaries for
  various macOS versions in a single folder, and dynamically at runtime chooses
  the right one for your system. This means that the icon you click to start the
  program is really a "placeholder" that is not Emacs itself, but rather just
  starts up Emacs. This "placeholder" often takes the form of a Ruby script. If
  this is the case, you'll need to drag the Ruby program on to the list. Ruby
  comes with macOS by default. You can find the program by opening Finder, and
  then from the "Go" menu choose "Go to Folder". Enter "/usr/bin" and you'll get
  that folder opened in Finder. In the folder, you'll find the ruby program that
  you can drag on to the Accessibility list.
  #+END_QUOTE
- Any other case (eg. on Linux or Windows), input source manager should be
  configured:
  #+BEGIN_SRC lisp
  (setq smart-input-source-external-ism "YOUR_ISM")
  #+END_SRC

  If ~YOUR_ISM~ *CAN'T* be used in the following way:
  + Run ~YOUR_ISM~ will output the current input source
  + Run ~YOUR_ISM INPUT_SOURCE_ID~ will select ~INPUT_SOURCE_ID~.

  you should also configure the following:
  #+BEGIN_SRC lisp
  (setq smart-input-source-do-get-input-source
        #'YOUR_DO_GET_INPUT_SOURCE_FUNCTION)
  (setq smart-input-source-do-set-input-source
        #'YOUR_DO_SET_INPUT_SOURCE_FUNCTION)
  #+END_SRC
  Refer to the section of /Configurations for other input source managers/
  at the end of this documentation.
 
* Usage
Load the package, open a file buffer, and then run ~smart-input-source-mode~ to
enable the mode for this buffer, if it finds no input source manager, it will do
nothing.

The mode is designed carefully, so it's safe to enable for all buffers even
its all in English.

#+BEGIN_SRC lisp
(use-package smart-input-source
  :config
  (setq smart-input-source-english-input-source
        "com.apple.keylayout.US")
  (setq smart-input-source-other-input-source
        "com.sogou.inputmethod.sogou.pinyin")
  (add-hook text-mode-hook #'smart-input-source-mode)
  (add-hook prog-mode-hook #'smart-input-source-mode))
#+END_SRC

**  How to get the input source id
After /input source manager/ is configured, you can get your /current
input source id/ by runing the following command in Emacs:
#+BEGIN_SRC lisp
(smart-input-source--get-input-source)
#+END_SRC

**  For none-evil user
~smart-input-source-mode~ provides three key functions to be used by end user:
- ~smart-input-source-check-to-activate-overlay~: check the context to determine
  whether the /inline english region/ should be activated or not, is the answer
  is yes, then activate the /inline english region/, and switch the input
  source to English.
- ~smart-input-source-follow-context~: follow the context to switch input source.
- ~smart-input-source-do~: Do the smart input source switching. If no need to
  activate the overlay, then follow the context to switch input source.

With ~evil~, user need not to touch those three functions directly, because they
are already added to ~evil~ hooks. Without ~evil~, only
~smart-input-source-check-to-activate-overlay~ is added to
~post-self-insert-hook~, the other two functions are not added to any hooks.
So by default none-evil user only have the /inline english region/ feature, it's
up to the user to decide where to hook the other two functions.

* Configure

| Variable                                  | Description                                | Default                                              |
|-------------------------------------------+--------------------------------------------+------------------------------------------------------|
| ~smart-input-source-other-pattern~        | Pattern to identify a character as other   | ~\cc~ , see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Regexp-Backslash.html][emacs manual]]                              |
| ~smart-input-source-english-pattern~      | Pattern to identify a character as english | ~[a-zA-Z]~                                           |
| ~smart-input-source-blank-pattern~        | Pattern to identify a character as blank   | ~[:blank:]~                                          |
| ~smart-input-source-english-input-source~ | Input source for english                   | ~com.apple.keylayout.US~                             |
| ~smart-input-source-other-input-source~   | Input source for other lanugage            | ~com.sogou.inputmethod.sogou.pinyin~                 |
| ~smart-input-source-external-ism~         | input resource manager                     | ~macism~                                             |
| ~smart-input-source-do-get-input-source~  | Function to get the current input source   | determined from the envrionment                      |
| ~smart-input-source-do-set-input-source~  | Function to set the input source           | determined from the envrionment                      |
| ~smart-input-source-inline-english-face~  | Face for the online english region overlay | '(:inherit font-lock-constant-face :inverse-video t) |
|-------------------------------------------+--------------------------------------------+------------------------------------------------------|

* Configurations for other input source managers
** Example: ~fcitx~
~fcitx~ is a input method framework popular among Chinese Linux users.
~fcitx-remote~ can serve as an input source manager for `fcitx`, and you can
configure as following:
#+BEGIN_SRC lisp
(require 'subr-x)
(setq smart-input-source-external-ism "fcitx-remote")
(setq smart-input-source-english-input-source "1")
(setq smart-input-source-other-input-source "2")
(setq smart-input-source-do-get-input-source
      (lambda()
        (string-trim
         (shell-command-to-string
          smart-input-source-external-ism))))
(setq smart-input-source-do-set-input-source
      (lambda(source)
        (pcase source
          ("1" (string-trim (shell-command-to-string
                             (concat smart-input-source-external-ism " -c"))))
          ("2" (string-trim (shell-command-to-string
                             (concat smart-input-source-external-ism " -o")))))))
#+END_SRC

** Example: ~ibus~
~ibus~ is another popular input method framework in the Linux world.
You can configure as following:
#+BEGIN_SRC lisp
(require 'subr-x)
(setq smart-input-source-external-ism "ibus")
(setq smart-input-source-english-input-source "xkb:us::eng")
(setq smart-input-source-other-input-source "OTHER_INPUT_SOURCE")
(setq smart-input-source-do-get-input-source
      (lambda()
        (string-trim (shell-command-to-string
          (concat smart-input-source-external-ism " engine")))))
(setq smart-input-source-do-set-input-source
      (lambda(source)
        (string-trim (shell-command-to-string
          (concat smart-input-source-external-ism " engine " source)))))
#+END_SRC

** Example: ~im-select~
[[https://github.com/daipeihust/im-select][im-select]] can be used as input source manager in Microsoft Windows.
It fulfills the requirements as a drop-in replacement of ~macism~, thus its
configuration is simpler than other input source managers.
#+BEGIN_SRC lisp
(setq smart-input-source-external-ism "im-select.exe")
(setq smart-input-source-english-input-source "ENGLISH_INPUT_SOURCE")
(setq smart-input-source-other-input-source "OTHER_INPUT_SOURCE")
#+END_SRC

However, because even though ~im-select~ supports switching different input
languages, it does not support multiple input methods in the same lanuage,
thus you should ensure that in each input language there is only one input
method, just like the following screenshot.

#+CAPTION: Smart input source
[[./screenshots/windows-im-select.jpg]]
